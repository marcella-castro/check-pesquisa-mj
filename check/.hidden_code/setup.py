#!/usr/bin/env python3
"""
Script de inicializa√ß√£o da aplica√ß√£o Pesquisa MJ
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def print_header():
    """Imprime cabe√ßalho do script"""
    print("=" * 60)
    print("üîß CONFIGURA√á√ÉO - Sistema Verifica√ß√£o Pesquisa MJ")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica vers√£o do Python"""
    print("üìã Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Erro: Python 3.8 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} detectado")
    return True

def check_pip():
    """Verifica se pip est√° dispon√≠vel"""
    print("üìã Verificando pip...")
    
    try:
        subprocess.run([sys.executable, "-m", "pip", "--version"], 
                      check=True, capture_output=True)
        print("‚úÖ pip est√° dispon√≠vel")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro: pip n√£o encontrado")
        return False

def create_virtual_environment():
    """Cria ambiente virtual se n√£o existir"""
    print("üìã Verificando ambiente virtual...")
    
    venv_path = Path("venv")
    
    if venv_path.exists():
        print("‚úÖ Ambiente virtual j√° existe")
        return True
    
    print("üì¶ Criando ambiente virtual...")
    try:
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ Ambiente virtual criado com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar ambiente virtual: {e}")
        return False

def get_venv_python():
    """Retorna caminho para o Python do ambiente virtual"""
    if os.name == 'nt':  # Windows
        return Path("venv/Scripts/python.exe")
    else:  # macOS/Linux
        return Path("venv/bin/python")

def install_dependencies():
    """Instala depend√™ncias do requirements.txt"""
    print("üìã Instalando depend√™ncias...")
    
    venv_python = get_venv_python()
    
    if not venv_python.exists():
        print("‚ùå Erro: Python do ambiente virtual n√£o encontrado")
        return False
    
    try:
        subprocess.run([
            str(venv_python), "-m", "pip", "install", "--upgrade", "pip"
        ], check=True)
        
        subprocess.run([
            str(venv_python), "-m", "pip", "install", "-r", "requirements.txt"
        ], check=True)
        
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def setup_environment_file():
    """Configura arquivo de ambiente"""
    print("üìã Configurando arquivo de ambiente...")
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    if env_file.exists():
        print("‚úÖ Arquivo .env j√° existe")
        return True
    
    if env_example.exists():
        shutil.copy(env_example, env_file)
        print("‚úÖ Arquivo .env criado a partir do exemplo")
        print("‚ö†Ô∏è  ATEN√á√ÉO: Configure as vari√°veis no arquivo .env antes de executar")
        return True
    else:
        print("‚ùå Arquivo .env.example n√£o encontrado")
        return False

def print_next_steps():
    """Imprime pr√≥ximos passos"""
    print()
    print("=" * 60)
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print()
    print("üìù Pr√≥ximos passos:")
    print()
    print("1. Configure o arquivo .env com suas credenciais:")
    print("   - LIME_API_URL: URL da sua inst√¢ncia LimeSurvey")
    print("   - LIME_USERNAME: Seu usu√°rio")
    print("   - LIME_PASSWORD: Sua senha")
    print("   - SURVEY_ID: ID do seu survey")
    print()
    print("2. Ative o ambiente virtual:")
    if os.name == 'nt':  # Windows
        print("   venv\\Scripts\\activate")
    else:  # macOS/Linux
        print("   source venv/bin/activate")
    print()
    print("3. Execute a aplica√ß√£o:")
    print("   python src/app.py")
    print()
    print("4. Acesse no navegador:")
    print("   http://localhost:8050")
    print()

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verifica√ß√µes iniciais
    if not check_python_version():
        sys.exit(1)
    
    if not check_pip():
        sys.exit(1)
    
    # Configura√ß√£o do ambiente
    if not create_virtual_environment():
        sys.exit(1)
    
    if not install_dependencies():
        sys.exit(1)
    
    if not setup_environment_file():
        sys.exit(1)
    
    print_next_steps()

if __name__ == "__main__":
    main()
